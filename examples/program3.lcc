def multiplyAndAdd ( int num1 , int num2 , int num3 )
{
    int RESULT [2];
    RESULT [0] = num1 * num2;
    RESULT [1] = RESULT [0] + num3;
    return;
}

def divideAndSubtract ( int num4 , int num5 , int num6 )
{
    int RESULT [2];
    RESULT [0] = num4 / num5;
    RESULT [1] = RESULT [0] - num6;
    return;
}

def incrementAndMultiply ( int num7 , int num8 )
{
    int RESULT [2];
    num7 = num7 + 1;
    RESULT [0] = num7 * num8;
    RESULT [1] = num8;
    return;
}

def decrementAndDivide ( int num9 , int num10 )
{
    int RESULT [2];
    num9 = num9 - 1;
    RESULT [0] = num9 / num10;
    RESULT [1] = num10;
    return;
}

def modAndAdd ( int num11 , int num12 )
{
    int RESULT [2];
    RESULT [0] = num11 % num12;
    RESULT [1] = RESULT [0] + num12;
    return;
}

def factorial ( int num )
{
    int result;
    int counter;
    result = 1;
    for (counter = 1; counter <= num; counter = counter + 1)
    {
        result = result * counter;
    }
    return;
}

def fibonacci ( int n )
{
    int a;
    int b;
    int next;
    int i;
    a = 0;
    b = 1;
    for (i = 1; i <= n; i = i + 1)
    {
        next = a + b;
        a = b;
        b = next;
    }
    return;
}

def isPrime ( int num )
{
    int i;
    int count;
    count = 0;
    for (i = 1; i <= num; i = i + 1)
    {
        if (num % i == 0)
        {
            count = count + 1;
        }
    }
    if (count == 2)
    {
        return;
    }
    else
    {
        return;
    }
}

def main ()
{
    int mainNum1;
    int mainNum2;
    int mainNum3;
    int mainNum4;
    int mainNum5;
    int mainNum6;
    int result;
    mainNum1 = 4;
    mainNum2 = 5;
    mainNum3 = 6;
    mainNum4 = 7;
    mainNum5 = 8;
    mainNum6 = 5;
    result = multiplyAndAdd (mainNum1 , mainNum2 , mainNum3);
    result = divideAndSubtract (mainNum1 , mainNum2 , mainNum3);
    result = incrementAndMultiply (mainNum1 , mainNum2);
    result = decrementAndDivide (mainNum1 , mainNum2);
    result = modAndAdd (mainNum4 , mainNum5);
    result = factorial (mainNum);
    result = fibonacci (mainNum);
    result = isPrime (mainNum);
    return;
}